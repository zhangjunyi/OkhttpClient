package http.okhttp.request;

import android.content.Context;
import android.text.TextUtils;
import android.util.Pair;
import android.widget.ImageView;

import com.squareup.okhttp.CacheControl;
import com.squareup.okhttp.Headers;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.RequestBody;
import com.squareup.okhttp.Request.Builder;

import http.okhttp.OkHttpClientManager;
import http.okhttp.callback.ResultCallback;

import java.io.File;
import java.io.IOException;
import java.util.IdentityHashMap;
import java.util.Map;

/**
 * 
 * @author Administrator
 * 
 */
public abstract class OkHttpRequest {
	protected OkHttpClientManager mOkHttpClientManager = OkHttpClientManager
			.getInstance();
	protected OkHttpClient mOkHttpClient;
	protected CacheControl  cacheControl;
	protected RequestBody requestBody;
	protected Request request;
	protected boolean   isStore;
	protected String url;
	// 取消任务的tag
	protected String tag;
	protected Map<String, String> params;
	protected Map<String, String> headers;

	protected OkHttpRequest(String url, String tag, Map<String, String> params,
			Map<String, String> headers,boolean isStore,CacheControl  cacheControl) {
		mOkHttpClient = mOkHttpClientManager.getOkHttpClient();
		this.url = url;
		this.tag = tag;
		this.params = params;
		this.headers = headers;
		this.isStore=isStore;
		this.cacheControl=cacheControl;
	}


	/**
	 * 初始化request的参数
	 * 
	 * @return
	 */
	protected abstract Request buildRequest();

	/**
	 * 与文件有关的request的参数
	 * 
	 * @return
	 */
	protected abstract RequestBody buildRequestBody();

	protected void prepareInvoked(ResultCallback callback) {
		requestBody = buildRequestBody();
		requestBody = wrapRequestBody(requestBody, callback);
		request = buildRequest();
	}

	public void invokeAsyn(ResultCallback callback) {
		prepareInvoked(callback);
		mOkHttpClientManager.execute(request, callback);
	}

	protected RequestBody wrapRequestBody(RequestBody requestBody,
			final ResultCallback callback) {
		return requestBody;
	}

	public <T> T invoke(Class<T> clazz) throws IOException {
		requestBody = buildRequestBody();
		Request request = buildRequest();
		return mOkHttpClientManager.execute(request, clazz);
	}

	/**
	 * 添加头部信息
	 * 
	 * @param builder
	 * @param headers
	 */
	protected void appendHeaders(Request.Builder builder,
			Map<String, String> headers) {
		if (builder == null) {
			throw new IllegalArgumentException("builder can not be empty!");
		}

		Headers.Builder headerBuilder = new Headers.Builder();
		if (headers == null || headers.isEmpty())
			return;

		for (String key : headers.keySet()) {
			headerBuilder.add(key, headers.get(key));
		}
		builder.headers(headerBuilder.build());
	}

	public void cancel() {
		if (!TextUtils.isEmpty(tag))
			mOkHttpClientManager.cancelTag(tag);
	}

	/**
	 * 请求内容封装类
	 * 
	 * @author Administrator
	 * 
	 */
	public static class Builder {
		private String url;
		private String tag;
		private boolean   isStore;

		// 响应头添加
		private Map<String, String> headers;
		// 参数键值对
		private Map<String, String> params;
		// 方便多参数传递
		private Pair<String, File>[] files;

		private String destFileDir;
		private String destFileName;

		private ImageView imageView;
		private int errorResId = -1;
		private String content;
		private byte[] bytes;
		private File file;
		private CacheControl  cacheControl;
		/**
		 * 添加url地址
		 * 
		 * @param url
		 * @return
		 */
		public Builder url(String url) {
			this.url = url;
			return this;
		}
		 public Builder CacheControl(CacheControl cacheControl) {
		      this.cacheControl = cacheControl;
		      return this;
		    }

		  public Builder isStore(boolean isStore) {
		      this.isStore = isStore;
		      return this;
		    }
		public Builder tag(String tag) {
			this.tag = tag;
			return this;
		}

		/**
		 * 键值对直接赋值
		 * 
		 * @param params
		 * @return
		 */
		public Builder params(Map<String, String> params) {
			this.params = params;
			return this;
		}

		/**
		 * 添加键值对参数
		 * 
		 * @param key
		 * @param val
		 * @return
		 */
		public Builder addParams(String key, String val) {
			if (this.params == null) {
				// 允许key值重复的集合
				params = new IdentityHashMap<String, String>();
			}
			params.put(key, val);
			return this;
		}

		/**
		 * 添加消息头
		 * 
		 * @param headers
		 * @return
		 */
		public Builder headers(Map<String, String> headers) {
			this.headers = headers;
			return this;
		}

		/**
		 * 添加消息头
		 * 
		 * @param key
		 * @param val
		 * @return
		 */
		public Builder addHeader(String key, String val) {
			if (this.headers == null) {
				headers = new IdentityHashMap<String, String>();
			}
			headers.put(key, val);
			return this;
		}

		/**
		 * 多文件上传添加
		 * 
		 * @param files
		 * @return
		 */
		public Builder files(Pair<String, File>... files) {
			this.files = files;
			return this;
		}

		/**
		 * 上传文件的名字
		 * 
		 * @param destFileName
		 * @return
		 */
		public Builder destFileName(String destFileName) {
			this.destFileName = destFileName;
			return this;
		}

		/**
		 * 上传文件根路径
		 * 
		 * @param destFileDir
		 * @return
		 */
		public Builder destFileDir(String destFileDir) {
			this.destFileDir = destFileDir;
			return this;
		}

		/**
		 * 显示图片的imageView
		 * 
		 * @param imageView
		 * @return
		 */
		public Builder imageView(ImageView imageView) {
			this.imageView = imageView;
			return this;
		}

		public Builder errResId(int errorResId) {
			this.errorResId = errorResId;
			return this;
		}

		public Builder content(String content) {
			this.content = content;
			return this;
		}

		/**
		 * 得到class实例
		 * 
		 * @param clazz
		 * @return
		 * @throws IOException
		 */
		public <T> T get(Class<T> clazz) throws IOException {
			OkHttpRequest request = new OkHttpGetRequest(url, tag, params,
					headers,isStore,cacheControl);
			return request.invoke(clazz);
		}

		/**
		 * get的异步方式
		 * 
		 * @param callback
		 * @return
		 */
		public OkHttpRequest get(ResultCallback callback) {
			OkHttpRequest request = new OkHttpGetRequest(url, tag, params,
					headers,isStore,cacheControl);
			request.invokeAsyn(callback);
			return request;
		}

		public <T> T post(Class<T> clazz) throws IOException {
			OkHttpRequest request = new OkHttpPostRequest(url, tag, params,
					headers, content, bytes, file,isStore,cacheControl);
			return request.invoke(clazz);
		}

		public OkHttpRequest post(ResultCallback callback) {
			OkHttpRequest request = new OkHttpPostRequest(url, tag, params,
					headers, content, bytes, file,isStore,cacheControl);
			request.invokeAsyn(callback);
			return request;
		}

		/**
		 * 上传文件的异步方法
		 * 
		 * @param callback
		 * @return
		 */
		public OkHttpRequest upload(ResultCallback callback) {
			OkHttpRequest request = new OkHttpUploadRequest(url, tag, params,
					headers, files);
			request.invokeAsyn(callback);
			return request;
		}

		public <T> T upload(Class<T> clazz) throws IOException {
			OkHttpRequest request = new OkHttpUploadRequest(url, tag, params,
					headers, files);
			return request.invoke(clazz);
		}

		/**
		 * 下载文件
		 * 
		 * @param callback
		 * @return
		 */
		public OkHttpRequest download(ResultCallback callback) {
			OkHttpRequest request = new OkHttpDownloadRequest(url, tag, params,
					headers, destFileName, destFileDir);
			request.invokeAsyn(callback);
			return request;
		}

		public String download() throws IOException {
			OkHttpRequest request = new OkHttpDownloadRequest(url, tag, params,
					headers, destFileName, destFileDir);
			return request.invoke(String.class);
		}

		/**
		 * 图片下载显示
		 * 
		 * @param callback
		 */
		public void displayImage(ResultCallback callback) {
			OkHttpRequest request = new OkHttpDisplayImgRequest(url, tag,
					params, headers, imageView, errorResId);
			request.invokeAsyn(callback);
		}
		/**
		 * 设置缓存
		 * 
		 * @param context
		 * @param maxCacheSize
		 */
		public Builder setCache(Context context, long maxCacheSize) {
			try {
				OkHttpClientManager
				.getInstance().setCache(context, maxCacheSize);
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return this;
		}
	
	}

}
